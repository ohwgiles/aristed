Development Plan
================
In rough descending order of priority

C++ semantic highlighting ----------------------
Complete the semantic highlighting using clang's
Visit* methods of the RecursiveASTVisitor. Review
applicability of the Lexer for keyword highlighting
for possible deprecation, and clean up ClangFile
encapsulation

Editing aesthetics -----------------------------
Highlight matching braces, auto-indentation, some
keyboard shortcuts for navigation. Briefly
investigate feasibility of vim-style modal control.
Add some Notepad++ style text processing bells and
whistles

File browser -----------------------------------
Create a file browser widget and tie to the editor.
This should be fairly easy with QDirModel.

Persistent Settings ----------------------------
Restore editor geometry between sessions. Allow
the editing of C++ include paths, move default
paths from hard code to install-time defaults

C++ definition following -----------------------
Follow #include paths and declarations

Language Variants and File Types ---------------
File type detection and application of appropriate
Clang settings. This should provide a platform
for more complex file-type checking, including
extension recognition, hash-bang inspection, and
perhaps a trial run through the parser, e.g. to
disambiguate C from C++ header files (.h).
Refactor the <Variant>Editor class concept to
allow an editor type to be changed on-the-fly.

Workspaces -------------------------------------
Implement equivalence of Workspace and MainWindow.
Force the opening of workspace-constrained files
in their appropriate workspace. Allow some
persistent settings (such as include paths) to
be varianted per workspace. Ability to create
workspace from the file browser. Ability to
simply discard workspaces. Command-line options
to launch a particular workspace. Implementing
this effectively will require libunique

END OF MAJOR MILESTONE. ALLOW FOR MATURATION REFACTORS.

Filetype diversification -----------------------
Investigate implementing or stealing support for
another language, e.g. Python. The Python "ast"
module might be useful here. Lua is also a good
option as I have considerable experience with its
C api.

Improve C/C++ code completion ------------------
The popup model should have graphical completion
type hints. Completion of patterns should be
introduced.

